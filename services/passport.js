const passport = require('passport');

// we only need strategy
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const FacebookStrategy = require('passport-facebook').Strategy;

const mongoose = require('mongoose');
const keys = require('../config/keys');

const User = mongoose.model('users');

// this func will give a special token to a user and send it to the browser so we can later identify him with a de-serializing function
passport.serializeUser((user, done) => {
  // this user.id is the id generated by mongodb, NOT google.
  done(null, user.id);
});

// take the token made by seralizeUser func and decode it so we know who this user is
passport.deserializeUser((id, done) => {
  User.findById(id)
    .then(user => {
      done(null, user);
    })
    .catch(error => console.log('a problem with mongoose', error));
});

// new GoogleStrategy generates a new GoogleStrategy instance
passport.use(
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: '/auth/google/callback',
      proxy: true
    },
    async (accesToken, refreshToken, profile, done) => {
      try {
        const existingGglUser = await User.findOne({ email: profile.email });

        if (existingGglUser) {
          const hasGglId = await User.findOne({ googleId: profile.id });
          if (hasGglId) {
            console.log('GGL user already exists');
            return done(null, existingGglUser);
          }
          return User.updateOne({ googleId: profile.id });
          // done is built out of two arguments: 1. something went wrong, 2. everything is ok.
          // in the first argument we pass here null because everything is okay, in the second we pass the object we found. we have to pass done to make passport pass the information back to the request.user so we can actually use it in other places.
        }
        const newFbUser = await new User({
          googleId: profile.id,
          email: profile.email
        }).save();
        console.log('Creating new GGL user');
        done(null, newFbUser);
      } catch (error) {
        console.log('problem with google strategy passport', error);
      }
    }
  )
);

passport.use(
  new FacebookStrategy(
    {
      clientID: '1028353350873754',
      clientSecret: 'ac941d20686719d310a475fdbd77e2bb',
      callbackURL: '/face',
      proxy: true
    },
    async (accessToken, refreshToken, profile, done) => {
      const existingUser = await User.findOne({ email: profile.email });
      if (existingUser) {
        const hasFB = await User.findOne({ facebookId: profile.id });
        if (hasFB) {
          console.log('FB user already exists');
          return done(null, existingUser);
        }
        console.log('FB id added to user');
        return User.updateOne({ facebookId: profile.id });
      }
      const newFbUser = await new User({
        facebookId: profile.id,
        email: profile.email
      }).save();
      console.log('Creating new FB user');
      done(null, newFbUser);
    }
  )
);
